<% #  (c) 2008-2011 by Allgemeinbildung e.V., Bremen, Germany  
   # This file is part of Communtu.

   # Communtu is free software: you can redistribute it and/or modify
   # it under the terms of the GNU Affero Public License as published by
   # the Free Software Foundation, either version 3 of the License, or
   # (at your option) any later version.

   # Communtu is distributed in the hope that it will be useful,
   # but WITHOUT ANY WARRANTY; without even the implied warranty of
   # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   # GNU Affero Public License for more details.

   # You should have received a copy of the GNU Affero Public License
   # along with Communtu.  If not, see <http://www.gnu.org/licenses/>.
%>

<h1><%=h @cd.fullname %></h1>

<%= render_flash %>

<p><%=@cd.distribution.name%>
<%=@cd.derivative.name%>
<%=@cd.architecture.name%>
</p>

<p><%=t(:livecd_created_by)%>
  <ul>
   <% @cd.users.each do |user| %>
     <li> <%=link_to user.login, user_path(user)%> </li>
   <% end %>
   </ul>
</p>

<p><%=t(:based_on_bundle)%> 
<% @cd.bundles.each do |b| %>
  <%=link_to b.name, metapackage_path(b)%> &nbsp;
<% end %>
</p>
<% if @cd.generated %>
 <% if !File.exists?(@cd.iso_image) %>
  <p><%= t(:iso_deleted) %>
     <%= link_to t(:generate_cd), :action => 'force_remaster', :id => @cd.id %>
     </p>
 <% else %>
  <p><%= t(:creation_successful) %>, 
      <%= number_to_human_size(@cd.size) %>,
      <%= change_date_time(@cd.updated_at).to_s %></p>
  <ul>
    <li><%= link_to t(:iso_image), @cd.iso_url %></li>
    <% if is_power_user? %>
      <% if session[:vm_cd]!=@cd.id %>
        <li><%= link_to t(:start_vm), :action => 'start_vm', :id => @cd.id %></li>
      <% else %>
	     <% vnc = "vnc://#{request.env['HTTP_X_FORWARDED_HOST']}:#{session[:vm_vnc]}" %>
        <li><%= t(:vm_running_under) %> <%= link_to vnc, vnc %>
            &nbsp; &nbsp;<%= link_to t(:stop_vm), :action => 'stop_vm', :id => @cd.id %></li>
      <% end %>
    <% end %>
    <% if @cd.kvm %>
      <li><%= link_to t(:kvm_image), @cd.kvm_url %></li>
    <% end %>
    <% if @cd.usb %>
      <li><%= link_to t(:usb_image), @cd.usb_url %></li>
    <% end %>
  </ul>
 <% end %>
<% end %>
<% if @cd.generating %>
  <p><%= t(:creation_in_progress) %></p>
<% end %>
<% if @cd.failed %>
  <p><%= t(:creation_failed) %>
  <%if is_admin? %>
     &nbsp;<%= link_to t(:generate_cd), :action => 'remaster' %>
     &nbsp;<%= link_to t(:generate_cd_new), :action => 'remaster_new' %></p>
  <% end %>
<% end %>
<% if is_admin? %>
<!--
<p>
      <% if @cd.vm_pid.nil? %>
        <%= link_to t(:start_vm_with_livecd_basis), :action  => 'start_vm_basis', :id => @cd.id%>
      <% else %>
        <%= t(:vm_running) %>. <%= t(:start_vm_instructions) %><br />
<br />
<%= link_to t(:stop_vm), :action => 'stop_vm', :id => @cd.id %></li>
      <% end %>
</p>
-->
<hr>
<% if is_admin? %>
<p>
  <% if !@cd.conflict_msg.nil? %>
    <%= t(:conflicts) %>:
	<% if @cd.conflict_msg.empty? %>
	  &nbsp;<%= t(:none)%><br>
	<% else %>
      <pre><%=@cd.conflict_msg %></pre>
	<% end %>
  <% end %>
  <%= link_to(t(:compute_conflicts),:action => :compute_conflicts, :id => @cd.id) %>
</p>
<% end %>

<hr>
<h3><%= t(:admin_interface_for_livecd)%></h3>

<p><%=t(:based_on_bundle)%> 
<% @cd.bundles.each do |b| %>
  <%=link_to b.debian_name, metapackage_path(b)%> &nbsp;
<% end %>
</p>

<p>
<%= t(:start_vm_instructions) %>
<pre>
kvm -daemonize -drive file=/home/communtu/livecd/kvm/<%=@cd.smallversion%>.img,if=virtio,boot=on,snapshot=on -smp 4 -m 800 -nographic -redir tcp:2221::22
scp -P 2221 -o StrictHostKeyChecking=no -o ConnectTimeout=500 <%=@cd.srcdeb%> root@localhost:/root/<%=@cd.smallversion%>/edit/root/
<% if !@cd.installdeb.index(".deb").nil? %>
scp -P 2221 -o StrictHostKeyChecking=no -o ConnectTimeout=500 <%=@cd.installdeb%> root@localhost:/root/<%=@cd.smallversion%>/edit/root/
<% end %>
$SSH
chroot <%= @cd.smallversion%>/edit
cd root
mount -t proc none /proc
mount -t sysfs none /sys
mount -t devpts devpts /dev/pts
gdebi -n <%=File.basename(@cd.srcdeb) %>
<%  if !@cd.installdeb.index(".deb").nil? %>
gdebi -n <%= File.basename(@cd.installdeb)%>
<% else %>
apt-get install <%= @cd.installdeb %>
<% end %>
#to shutdown the virtual PC
shutdown -h now
</pre>
<br />
<% end %>
</p>
<p>
<% if !@cd.log.nil? and !@cd.log.empty? %>
  <h3><%=t(:logfile_extract)%></h3>
  <pre><%= h @cd.log %></pre>
<% end %>
</p>
